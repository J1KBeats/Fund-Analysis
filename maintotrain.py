import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.pipeline import make_pipeline
import joblib

# Расширенный набор данных
data = {
    "News": [
        "Сегодня в Китае состоялась встреча премьер-министров России и Китая, было принято новое торговое соглашение",
        "Акции компании X упали после публикации отчета о снижении прибыли на 20%",
        "Цены на нефть выросли на фоне сокращения добычи в странах ОПЕК",
        "Экономика США сократилась на 3% во втором квартале",
        "Компания Y объявила о запуске нового инновационного продукта",
        "Ведущий аналитик предсказал рецессию в следующем году",
        "Правительство объявило о новых мерах поддержки малого бизнеса",
        "Регуляторы начали расследование против крупного финансового института",
        "Центральный банк повысил процентные ставки",
        "Компанию Z оштрафовали на крупную сумму за нарушение антимонопольного законодательства",
        "Была достигнута договоренность о прекращении торговой войны между двумя крупнейшими экономиками мира",
        "Технологическая компания W выпустила отчет с рекордными показателями роста",
        "Уровень безработицы снизился до рекордно низкого уровня",
        "Компания V объявила о масштабных сокращениях персонала",
        "Новый законопроект о снижении налогов был одобрен парламентом",
        "Природная катастрофа нанесла значительный ущерб сельскохозяйственным угодьям",
        "Крупная нефтяная компания объявила о начале новых разведывательных работ",
        "Международное агентство повысило кредитный рейтинг страны",
        "Важные показатели инфляции оказались ниже прогнозов",
        "Научный прорыв в области возобновляемой энергии",
        "Компания U объявила о банкротстве",
        "Мировые цены на золото достигли рекордных уровней",
        "Инвесторы обеспокоены политической нестабильностью в регионе",
        "Крупная авиакомпания объявила о значительном увеличении заказов на новые самолеты",
        "Финансовые результаты квартала превзошли ожидания аналитиков",
        "Введение новых экологических стандартов в автомобильной промышленности",
        "Объявлено о слиянии двух крупных компаний",
        "Эксперты предсказывают рост глобального ВВП в следующем году",
        "Производственная компания Q объявила о рекордных убытках",
        "Страны ОПЕК договорились о сокращении добычи нефти",
        "Крупный инвестиционный фонд заявил о выводе капитала из страны",
        "Новое исследование показало снижение потребительского доверия"
    ],
    "Market Change": [
        1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
        1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
        1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
        0, 1  # Добавлено 1, чтобы сделать длину массивов одинаковой
    ]
}

# Проверка длины массивов
assert len(data['News']) == len(data['Market Change']), "Длины массивов 'News' и 'Market Change' должны быть одинаковыми"

# Создаем DataFrame
df = pd.DataFrame(data)
df.to_csv("market_news_data_extended.csv", index=False)

# Загрузка данных
df = pd.read_csv("market_news_data_extended.csv")

# Разделение на тренировочную и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(df['News'], df['Market Change'], test_size=0.2, random_state=42)

# Создание и обучение модели
model = make_pipeline(CountVectorizer(), LogisticRegression())
model.fit(X_train, y_train)

# Сохранение модели в файл
joblib.dump(model, 'market_prediction_model.pkl')

# Пример использования модели
test_news = [
    "Сегодня был подписан важный международный договор о торговле",
    "Крупный инвестиционный фонд заявил о выводе капитала из страны",
    "Власти Китая и России обсудили новые статьи договора о добрососедстве",
    "Соединенные штаты Америки заявили о начале производства нового вида ядерного оружия"
]

# Загрузка модели из файла
loaded_model = joblib.load('market_prediction_model.pkl')
predictions = loaded_model.predict(test_news)

for news, prediction in zip(test_news, predictions):
    print(f"Новость: {news}")
    print(f"Прогноз изменения на фондовом рынке: {'рост' if prediction == 1 else 'падение'}")
    print()

